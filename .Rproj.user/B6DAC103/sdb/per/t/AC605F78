{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introducton to R\"\nauthor: \"Jingtong Feng\"\noutput:\n  html_document:\n    fig_height: 7\n    fig_width: 9\n    keep_md: yes\n    toc: yes\n    toc_float: yes\n---\n\n```{r setup, include=FALSE}\nlibrary(knitr)\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)\n\n```\n\n# Basic mapping-crime map\n\nThere are many different options for mapping, but we are going to focus on *GIStools*, which depends on several packages, including *maptools*, *rgdal*, and *sp*.\n\n\n\n```{r, tidy = FALSE, echo = FALSE}\nrm(list= ls()) # Clear environment\n\n# install.packages(\"GISTools\")\n# library(GISTools) # Note all the dependent packages loaded\n\nlibrary(GISTools, suppressPackageStartupMessages(\"True\")) # Lead package without oodles of messages\n\ndata(newhaven) # Convenient collection of data\n```\n\nPlotting once these packages (*sp* in particular) are loaded is pretty straightforward; R now knows how to deal with these data types.\n\nLet's make a quick crime map\n\n```{r, tidy = TRUE}\n# head(blocks) # This is a MESS\nhead(data.frame(blocks)) # Coerce to dataframe first\nplot(blocks, lwd = 0.5, col = \"darkseagreen1\", border = \"white\") # Plot the 'lowest' first.\nplot(roads, add = TRUE, col = \"slategray3\") # Roads on top\nplot(breach, pch = 17, add = TRUE, col =add.alpha(\"#EE2C2C\", .7)) # Add transparency\n```\n\nThe *Locator* function lets you interact directly with the plot. You click within the plot, and it returns the coordinates of where you clicked. This is a reasonable way to get the coordinates when you are placing things like legends within the plot.\n\n```{r tidy =FALSE}\n# locator() # Get Coordinates (commented for markdown)\nplot(blocks, lwd = 0.5, col = \"cornsilk\", border = \"antiquewhite2\")\nplot(roads, add = TRUE, col = \"slategray3\") \nplot(breach, pch = 20, add = TRUE, col =\"red\")\n\n# Add a scale bar, if you're into that\nmap.scale(xc = 540000, yc = 152000, # Position on map, in map units\n          len = miles2ft(2), # Length in feet (2 * 5,280)\n          units = \"Miles\", \n          ndivs = 4, \n          subdiv = 0.5)\n\n#locator() # Click once on location, then hit finish button in plot window OR use the Esc key\n\n# North arrow\nnorth.arrow(xb = 540000, yb = 157000, \n            len = miles2ft(.2), # Length of base\n            col = \"gray60\",\n            border = \"gray30\",\n            tcol = \"gray60\") # Color\n\ntitle(main = 'New Haven, CT.') # Title\n\ntitle(main = \"Crime Infested Wasteland\", # Informative subtitle\n      line = -.2, # Move down\n      col.main = \"red3\",\n      font.main = 4, # Bold italic\n      cex.main = 1) # make a little smaller\n```\n\n#Choropleth Maps\nThis is essentially a basic reference map, but we can also use the attribute data within the spatial classes to make thematic maps, such as choropleth maps. There are many ways to create choropleth maps, including a whole friggin' package called *choroplethr*, but let's use *GISTools* for consistency, which has some functions specifically for that. Let's make two maps with the data we have: percent vacant and percent owner occupied.\n\n```{r, tidy = TRUE}\n# head(data.frame(blocks)) # Look at our data again\n\ncolnames(data.frame(blocks)) # Just the attribute names\n\nblocks$P_VACANT[1:5] # Can be treated like a dataframe... sometimes  \n\n# hist(blocks$P_VACANT) #Same for graphing\ndisplay.brewer.pal(5, \"Blues\")\n\n# auto.shading builds off of color brewer to create classes\n# Needs to be stored separately\nshades.blue  <-  auto.shading(blocks$P_VACANT, cols = brewer.pal(7,'Blues')[3:7]) #Create a new color palette\n\nshades.blue # Note class breaks\n\n# ?auto.shading # Part of GIStools\n\nchoropleth(blocks, \n           v = blocks$P_VACANT, # Variable to be mapped\n           shading = shades.blue, # Shading object created above\n           bg = \"gray30\", # Background color\n           border = NA # No Border\n           ) \n\nplot(blocks,\n     add = TRUE,\n     col=NA, \n     border = add.alpha(\"#FFFFFF\", .2) # partly transparent white\n     )\n\n# choropleth maps attributes held in SpatialPolygons DataFrame (e.g., 'blocks')\nchoro.legend(px = 533000, py = 161000, \n             sh = shades.blue,\n             border = \"#FFFFFF80\", # Semitransparent white around boxes\n             bg = NA, # No background color,\n             bty = \"n\", # No outer box\n             text.col = \"red\", # Broken apparently\n             title.col = \"white\"\n             )\n\ntitle(main = \"Percent Vacant\",\n      col.main = \"gray20\")\n\n\n# Create new set of shades for Owner occupied percentage\nshades.yell  <-  auto.shading(blocks$P_OWNEROCC,cols=brewer.pal(5,'YlOrRd')) #Create a new color palette\n\nchoropleth(blocks, blocks$P_OWNEROCC, \n           shading = shades.yell, # Shading object created above\n           bg = \"gray30\", # Background color\n           border = NA # No Border\n           ) \n           \nplot(blocks,\n     add = TRUE,\n     col=NA, \n     border = add.alpha(\"#000000\", .15) # partly transparent black\n     )\n\nchoro.legend(px = 533000, py = 161000, \n             sh = shades.yell,\n             border = NA,\n             bg = NA, # No background color,\n             bty = \"n\" # No outer box\n             )\n# Add title\ntitle(main = \"Percent Owner Occupied\",\n      col.main = \"gray20\")\n```\n\nNow, what would be even more interesting to put these side by side. Note that color choice is important, so these would probably work better with swapped palettes, since red is usually associated with 'negative' variables.\n\n```{r, tidy = TRUE}\no.par <- par(no.readonly = FALSE)\n\n# Put them side by side, adjust margins\npar(mfrow = c (1,2), mar = c(1,0,1,0)) # mar =bottom, left, top, right\n\n# Vacant Map\nchoropleth(blocks, v = blocks$P_VACANT, shading = shades.blue, bg = \"gray30\", border = NA) \nplot(blocks, add = TRUE, col = NA, border = add.alpha(\"#FFFFFF\", .2))\nchoro.legend(px = 533000, py = 161000, sh = shades.blue, border = \"#FFFFFF80\", bg = NA, bty = \"n\", text.col = \"red\", title.col = \"white\")\ntitle(main = \"Percent Vacant\", col.main = \"white\", line = -1)\n\n# Owner Occupied Map\nchoropleth(blocks, blocks$P_OWNEROCC, shading = shades.yell, bg = \"gray30\", border = NA) \nplot(blocks, add = TRUE, col=NA, border = \"gray15\" ) # Alpha not working on second plot??\nchoro.legend(px = 533000, py = 161000, sh = shades.yell, border = NA, bg = NA, bty = \"n\" )\ntitle(main = \"Percent Owner Occupied\", col.main = \"white\", line = -1)\n\npar(o.par)\n\n```\n",
    "created" : 1491509558960.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1553686312",
    "id" : "AC605F78",
    "lastKnownWriteTime" : 1491509738,
    "last_content_update" : 1491509738046,
    "path" : "~/GitHub/Jingtong11/index.Rmd",
    "project_path" : "index.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}